"use strict";(globalThis.webpackChunkdocs=globalThis.webpackChunkdocs||[]).push([[5645],{7502:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"use-cases","title":"Use Cases","description":"Tested Code Examples","source":"@site/docs/use-cases.md","sourceDirName":".","slug":"/use-cases","permalink":"/Bluehawk/use-cases","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"use-cases","title":"Use Cases","sidebar_label":"Use Cases","sidebar_position":3,"custom_edit_url":null},"sidebar":"mainSidebar","previous":{"title":"Install","permalink":"/Bluehawk/install"},"next":{"title":"Extract Code Snippets","permalink":"/Bluehawk/code-snippets/"}}');var o=t(4848),a=t(8453);const i={id:"use-cases",title:"Use Cases",sidebar_label:"Use Cases",sidebar_position:3,custom_edit_url:null},r=void 0,l={},c=[{value:"Tested Code Examples",id:"tested-code-examples",level:3},{value:"Checkpointed Tutorials",id:"checkpointed-tutorials",level:3}];function d(e){const n={code:"code",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h3,{id:"tested-code-examples",children:"Tested Code Examples"}),"\n",(0,o.jsxs)(n.p,{children:["Imagine you want to paste some code from a unit test into your docs. You can\nmark up the unit test source file like this with Bluehawk tags like\n",(0,o.jsx)(n.code,{children:":snippet-start:"}),", ",(0,o.jsx)(n.code,{children:":snippet-end:"}),", ",(0,o.jsx)(n.code,{children:":remove-start:"}),", and ",(0,o.jsx)(n.code,{children:":remove-end:"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-swift",children:'// SomeTest.swift\n\n// ... more tests ...\nfunc someTest() {\n    // :snippet-start: some-example\n    let person = getPerson()\n    // :remove-start: // remove test boilerplate from the code block\n    XCTAssert(person.name != "Keith")\n    // :remove-end:\n    person.doSomething {\n        person.doSomethingElse()\n    }\n    // :snippet-end:\n}\n// ... more tests ...\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Running Bluehawk with the ",(0,o.jsx)(n.code,{children:"snip"})," command on this file will produce a snippet\nfile called ",(0,o.jsx)(n.code,{children:"SomeTest.snippet.some-example.swift"})," that looks something like this:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-swift",children:"let person = getPerson()\nperson.doSomething {\n    person.doSomethingElse()\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"You can now import this snippet into your documentation. Now you have the\nbenefit of tested examples that are still easy to read in the docs."}),"\n",(0,o.jsx)(n.p,{children:"Bluehawk markup can go into any source file, so you don't need to rig every unit\ntest framework you use up to also extract code examples. Just use Bluehawk with\nthe unit test framework that suits your language and your project. Heck, you don't\neven need a unit test framework. Use Bluehawk in your app or bash script that you\nrun to make sure everything's still more or less working."}),"\n",(0,o.jsx)(n.h3,{id:"checkpointed-tutorials",children:"Checkpointed Tutorials"}),"\n",(0,o.jsx)(n.p,{children:'Suppose you have a tutorial repo that learners can clone to follow along with\nyour tutorial from a certain starting point, say a "start" branch. You also want\nlearners to be able to check out a "final" branch so they can see the finished\nproject. As the tutorial developer, you would have to maintain these two state\nbranches, which can be tedious and error prone.'}),"\n",(0,o.jsxs)(n.p,{children:["To manage this process, you can use Bluehawk to mark up your tutorial source and\nindicate different states or checkpoints with the ",(0,o.jsx)(n.code,{children:":state-start:"})," and\n",(0,o.jsx)(n.code,{children:":state-end:"})," tags:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-swift",children:"// WelcomeViewController.swift\n\n// ... more code ...\n// :snippet-start: sign-up\n@objc func signUp() {\n    // :state-start: final\n    setLoading(true);\n    app.emailPasswordAuth.registerUser(email: email!, password: password!, completion: { [weak self](error) in\n        DispatchQueue.main.async {\n            self!.setLoading(false);\n            ...\n        }\n    })\n    // :state-end:\n    // :state-start: start\n    // TODO: Use the app's emailPasswordAuth to registerUser with the email and password.\n    // When registered, call signIn().\n    // :state-end:\n}\n// :snippet-end:\n// ... more code ...\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Running ",(0,o.jsx)(n.code,{children:"bluehawk copy"})," on this file with ",(0,o.jsx)(n.code,{children:"--state start"})," results in a copy of\n",(0,o.jsx)(n.code,{children:"WelcomeViewController.swift"})," that looks something like this:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-swift",children:"// WelcomeViewController.swift\n\n// ... more code ...\n@objc func signUp() {\n    // TODO: Use the app's emailPasswordAuth to registerUser with the email and password.\n    // When registered, call signIn().\n}\n// ... more code ...\n"})}),"\n",(0,o.jsx)(n.p,{children:'Notice that you still have all of the boilerplate, but no final implementation\ncode. Only the "TODO" is left.'}),"\n",(0,o.jsxs)(n.p,{children:["Using the ",(0,o.jsx)(n.code,{children:"--state final"})," flag produces another version of\n",(0,o.jsx)(n.code,{children:"WelcomeViewController.swift"}),' that has the boilerplate and the final\nimplementation code, but no "TODO":']}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-swift",children:"// WelcomeViewController.swift\n\n// ... more code ...\n@objc func signUp() {\n    setLoading(true);\n    app.emailPasswordAuth.registerUser(email: email!, password: password!, completion: { [weak self](error) in\n        DispatchQueue.main.async {\n            self!.setLoading(false);\n            ...\n        }\n    })\n}\n// ... more code ...\n"})}),"\n",(0,o.jsx)(n.p,{children:"You can run Bluehawk on an entire directory, and each file in the repo will be\ncopied or transformed to the output directory. This makes it easy to copy one state\nof the entire tutorial source into another repo that learners can clone."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var s=t(6540);const o={},a=s.createContext(o);function i(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);